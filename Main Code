#include <Ultrasonic.h>
#include <LWiFi.h>
#include <LWiFiClient.h>
#include <LWiFiServer.h>
#include <LWiFiUdp.h>

#include <Wire.h>
#include "rgb_lcd.h"
#include "IotHttpClient.h"
#include "IotUtils.h"

#include <string>

// ********************************************
// ****** START user defined definitions ******
// ********************************************
#define WIFI_SSID  "AndroidAP" //"TP-IOT"
#define WIFI_PASSWORD "xafs6711"    //"iot@tp4me"
// ******************************************
// ****** END user defined definitions ******
// ******************************************

//#define DELAY 60000

rgb_lcd lcd;
Ultrasonic ultrasonic(3);
#define LED 8
#define motion 7
int incomingdata = 0;
boolean started = false;
unsigned char raw[15];
int characters[15];
int dataLen;
String hexnumber;

//const int colorR = 0;
//const int colorG = 255;
//const int colorB = 0;

// ******************************************
// ****** setup()****************************
// ******************************************
void setup()
{
    Serial.begin(9600);
    LWiFi.begin();
    lcd.begin(16, 2);
    pinMode(motion, INPUT);
    pinMode(LED, OUTPUT);
    digitalWrite(motion, LOW);
    lcd.clear();
    lcd.print("Sensor Active");
    delay (2500); 
    Serial1.begin(9600);
}

// ******************************************
// ****** loop() ****************************
// ******************************************
void loop()
{
    Serial.print("\nSearching for Wifi AP...\n");

    if ( LWiFi.connectWPA(WIFI_SSID, WIFI_PASSWORD) != 1 )
    {
        Serial.println("Failed to Connect to Wifi.");
    }
    else
    {
        Serial.println("Connected to WiFi");
        
          lcd.setCursor(0, 0);
          lcd.print("Connected WiFi");
        
        // Generate some random data to send to Azure cloud.
        srand(vm_ust_get_current_time());
        int deviceId = 60 + (rand() % 100);
        
        lcd.clear();
        int RangeInCentimeters;
        RangeInCentimeters = ultrasonic.MeasureInCentimeters();
        
        int rfid = getrfid();
        //Serial.println(rfid);
        
         int full;
         // put your main code here, to run repeatedly:
          if(digitalRead(motion) == HIGH && RangeInCentimeters < 12) {
               digitalWrite(LED,HIGH);
               lcd.print("Occupied");
               full = 1;
               delay (2000);
               lcd.clear();
               lcd.println(rfid);
              delay (2000);
              lcd.clear();
          }
          else if (digitalRead(motion) == HIGH && RangeInCentimeters > 12) {
              digitalWrite(LED,LOW);
              lcd.println("Vacant");
              full = 0;
              delay (2000);
              lcd.clear();
              
          }
          else if (digitalRead(motion) == LOW && RangeInCentimeters < 12) {
              digitalWrite(LED,HIGH);
              lcd.println("Occupied");
              full = 1;
              delay (2000);
              lcd.clear();
              lcd.println(rfid);
              delay (2000);
              lcd.clear();
          }
        else {
              digitalWrite(LED,LOW);
              lcd.println("Vacant");
              full = 0;
              delay (2000);
              lcd.clear();
        }        
        // Construct a JSON data string using the random data.
        std::string json_iot_data;
        
        json_iot_data += "{ \"DeviceId\":" + IotUtils::IntToString(deviceId);
        json_iot_data += ", \"Motion\":" + IotUtils::IntToString(full);
        json_iot_data += ", \"Distance\":" + IotUtils::IntToString(RangeInCentimeters);
        json_iot_data += ", \"RFID\":" + IotUtils::IntToString(rfid);
        json_iot_data += " }";

        // Send the JSON data to the Azure cloud and get the HTTP status code.
        IotHttpClient     https_client;
        
        int http_code = https_client.SendAzureHttpsData(json_iot_data);

        Serial.println("Print HTTP Code:" + String(http_code));
        //lcd.setCursor(0, 1);
        //lcd.print("Code:" + String(http_code));
    }

    LWiFi.disconnect();
        Serial.println("Disconnecting HTTP connection");
    // Sleeps for a while...
    loop();    
}

int getrfid(){
 
if (Serial1.available() > 0)
{
    // the incoming data is an array of 13 numbers
    // the numbers are actually ASCII integers for ABDCDEF1234567890
    // so we have to convert the ints to ASCII as a concatenated string
    // thne we have to convert teh HEX string to decimal integer
// the decimal integer is our RFID tag number
    
    int num = 0;
    //Serial.print("I got into the getrfid loop");
 while (num != 14)
  {
   // Serial.println("I GOT INTO THE NUM!=14 LOOP");
    incomingdata = Serial1.read();
    characters[dataLen] = incomingdata;
    dataLen++;

    //Serial.print(dataLen);
    //Serial.print(" ");
    //Serial.println(incomingdata);

    delay(10);
  num++;
  }
    

    if (dataLen > 13)
    {
      //Serial.println("I got into the dataLen loop");
        for (int i = 0; i < dataLen; ++i)
        {
             String letter = ConvertToASCII(characters[i]);
            //Serial.print(letter);
              if (i > 3 && i < 11)
              {
                  hexnumber = hexnumber + letter;
          }         
             }
             //Serial.println();
             //Serial.println(hexnumber);
            
             
             
             //lcd.setCursor(0,0);
             //lcd.print("RFID number:");
             //lcd.setCursor(0,1);
             //lcd.print(ConvertToDecimal(hexnumber));
             //delay(3000);
             //lcd.clear();


            
            int result = ConvertToDecimal(hexnumber);
            //Serial.println("This is the result that i am looking for"  + result);
            
            dataLen = 0;
            hexnumber = "";
            return result;
    }
}
}

int ConvertToDecimal(String hexnumber)
{
int out;
char dtm[8];
dtm[0] = hexnumber[0];
dtm[1] = hexnumber[1];
dtm[2] = hexnumber[2];
dtm[3] = hexnumber[3];
dtm[4] = hexnumber[4];
dtm[5] = hexnumber[5];
dtm[6] = hexnumber[6];
dtm[7] = hexnumber[7];

sscanf( dtm, "%x", &out );

return out;
}

String ConvertToASCII(int letter)
{
if (letter == 48)
{return "0";}
if (letter == 49)
{return "1";}
if (letter == 50)
{return "2";}
if (letter == 51)
{return "3";}
if (letter == 52)
{return "4";}
if (letter == 53)
{return "5";}
if (letter == 54)
{return "6";}
if (letter == 55)
{return "7";}
if (letter == 56)
{return "8";}
if (letter == 57)
{return "9";}
if (letter == 65)
{return "A";}
if (letter == 66)
{return "B";}
if (letter == 67)
{return "C";}
if (letter == 68)
{return "D";}
if (letter == 69)
{return "E";}
if (letter == 70)
{return "F";}

{return "";}

}
